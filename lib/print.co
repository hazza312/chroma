R space G $20 emit ;
R cr W () G $a emit ; 

R print-int W  (n --) Print positive/negative number in base10.
G dup !if drop $30 emit ; then dup -if neg $2d emit then +div drop ;
W __ R .div G dup -if ; then $30 + emit .div ; 
W __ R +div G 0 1- swap R loop G dup !if drop ; then 10 /mod loop .div ; 

R print-sign W (n --) Print the sign of a number where 0 is +.
G -if $2d emit ; then $2b emit ;

R print-zf W (n width --) Print non-negative number with zero filled fixed width.
G dup >r for 10 /mod next drop r> for $30 + emit next ;

R print-szf W (n width --) Print number with sign and zero filled fixed width.
G swap dup print-sign abs swap print-zf ;

R print-s-hms W (s --) Print duration in seconds as hh:mm:ss
G 3600 /mod 2 print-zf 58 emit 60 /mod 2 print-zf 58 emit 2 print-zf ;

R hexdigit W (n -- n) G dup $a - -if $30 + ; then 55 + ;
R nibble W (n --) G $f and hexdigit emit ; 
R byte W (n --) G dup 4 shr nibble nibble ; R short W (n --) G dup 8 shr byte byte ; 
R dword W (n --) G dup 16 shr short short ; R qword W (n --) G dup 32 shr dword dword ;


