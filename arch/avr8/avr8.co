W AVR binary format ==================
Y 2 sections little endian "bin" ext I text Y 1 I data Y 2 ;
Y $00 dup text base ! text ptr !
Y $200 dup data base ! data ptr !

I i8 Y text w8 Y ; I i16 Y text w16 Y ;
I ip Y text ptr I Y I ip@ Y ip @ I ip! Y text ptr ! ;
I dp Y data ptr I Y I dp@ Y dp @ I dp! Y text ptr  ! ;

I compile W calculate padding Y data base @ ip@ - 
W make binary Y text write padding data write ;


W AVR Ops ==================
W ToS is R16:R17, later make it R24:R25 (optimise immediate adds);
W Xlo = R26, Xhi = R27
I Xlo Y 26 ; 
I Xhi Y 27 ;

I ldi W (val Rd[16..32] --) Y 
16 - 4 shl $e000 or swap dup $00f0 and 4 shl swap $000f and or or i16 ;

I push M 0d 93 1d 93 Y ;
I pop M 1d 9d 0d 91 Y ;
I popb M 3d 91 2d 91 Y ;

I lit Y push dup Y $00ff and 16 ldi 8 shr 17 ldi ;
I jmp Y ip@ - 1 shr $0fff and $C000 or i16 ;
I call Y ip@ - 1 shr $0fff and $D000 or i16 ;
I ; M 08 95 Y ;

I + Y popb M 02 0f 13 1f Y ;
I - Y popb M 20 1b 31 0b 89 01 Y ;

Y text magic!
R init Y $00 dup Xlo ldi Xhi ldi 
R main G $0304 $0304 - R here G 0 + here ; 
