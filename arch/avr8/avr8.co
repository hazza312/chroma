W AVR binary format ==================
Y 2 sections little endian "bin" ext I text Y 1 I data Y 2 ;
Y $00 dup text base ! text ptr !
Y $200 dup data base ! data ptr !

I i8 Y text w8 Y ; I i16 Y text w16 Y ;
I ip Y text ptr I Y I ip@ Y ip @ I ip! Y text ptr ! ;
I dp Y data ptr I Y I dp@ Y dp @ I dp! Y text ptr  ! ;

I compile W calculate padding Y data base @ ip@ - 
W make binary Y text write padding data write ;

W AVR Ops ==================
Y text magic!

W ToS is R16:R17, later make it R24:R25 (optimise immediate adds);
W Xlo = R26, Xhi = R27
I Xlo Y 26 ; 
I Xhi Y 27 ;
I Tlo Y 24 ;
I Thi Y 25 ;

I ldi W (val Rd[16..32] --) Y 
16 - 4 shl $e000 or swap dup $00f0 and 4 shl swap $000f and or or i16 ;

I break M 98 95 Y ;
I push M 8d 93 9d 93 Y ;
I pop M 9e 91 8e 91 Y ;
I popb M 7e 91 6e 91 Y ;

I drop Y pop ;
I dup Y push ; 
I nip M 12 97 Y ;

I lit Y push dup Y $00ff and 24 ldi 8 shr 25 ldi ;
I jmp Y ip@ 2 + - 1 shr $0fff and $C000 or i16 ;
I call Y ip@ 2 + - 1 shr $0fff and $D000 or i16 ;
I ; M 08 95 Y ;

I 1+ M 01 96 Y ;
I 1- M 01 97 Y ;
I + Y popb M 86 0f 97 1f Y ;

I and Y popb M 86 23 97 23 Y ;
I or Y popb M 86 2b 97 2b Y ;
I xor Y popb M 86 2f 97 2f Y ;

