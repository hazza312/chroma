Y 2 sections I code Y 1 I data Y 2 ;
Y "out" ext
Y little endian

Y code magic!
R init
M 20 0 80 d2 W mov	x0, #1 
M e1 0 0 10 W adr	x1, #28
M a2 1 80 d2 W mov	x2, #13
M 90 0 80 d2 W mov	x16, #4
M 1 10 0 d4 W svc	#0x80
M 0 0 80 d2 W mov	x0, #0
M 30 0 80 d2 W mov	x16, #1
M 1 10 0 d4 W svc	#0x80

Y data magic!
M 48 65 6c 6c 6f 20 57 6f 72 6c 64 21 a 0 0 0 W "Hello World!"


Y 0 magic!
I b64 Y 0 w64 ;
I b32 Y 0 w32 ;
I compile 
M
W see mach-o/loader.h
W mach header
M cf fa ed fe W magic
M 0c 00 00 01 W cputype: 0c (CPU_TYPE_ARM64) | 0x01000000 (CPU_ARCH_ABI64)
M 00 00 00 00 W cpusubtype
M 02 00 00 00 W filetype: MH_EXECUTE = demand paged executable file
M 6 00 00 00 W ncmds, number of load commands
M 70 01 00 00 W size of all load commands
M 85 00 20 00 W flags MH_NOUNDEFS (0x1) | MH_DYLDLINK (0x4) | MH_TWOLEVEL (0x80) | MH_PIE (0x200000)
M 00 00 00 00 W reserved

W load command #1
Y $19 b32 W cmd 0x19 = LC_SEGMENT_64, 64-bit segment of this file to be mapped 
Y $48 b32 W cmdsize (bytes) 
M 5f 5f 50 41 47 45 5a 45 52 4f 00 00 00 00 00 00 W segment name "__PAGEZERO"
Y 0 b64 W vmaddr, memory address of segment
Y $100000000 b64 W vmsize, size of segment
Y 0 b64 W fileoffset 
Y 0 b64 W filesize, amount to map from file
Y 0 b32 W maxprot
Y 0 b32 W initprot
Y 0 b32 W nsects, number sections in segment
Y 0 b32 W flags

W load command #2
Y $19 b32 W LC_SEGMENT_64
Y $98 b32 W cmdsize
M 5f 5f 54 45 58 54 00 00 00 00 00 00 00 00 00 00 W "__TEXT"
Y $100000000 b64 W vmaddr
Y $4000 b64 W vmsize
Y 0 b64 W fileoffset
Y $4000 b64 W filesize, amount to map from file
M 5 0 0 0 W maxprot read | execute
M 5 0 0 0 W initprot read | execute
Y 1 b32 W nsects
Y 0 b32 W flags

W section #1
M 5f 5f 74 65 78 74 00 00 00 00 00 00 00 00 00 00 W sect name "__text"
M 5f 5f 54 45 58 54 00 00 00 00 00 00 00 00 00 00 W segname "__TEXT"
Y $100003f80 b64 W addr, memory address of section
Y $2d b64 W size in bytes of section
Y $3f80 b32 W file offset
Y 2 b32 W align, power of 2
Y 0 b32 W file offset of relocation entries
Y 0 b32 W number of relocation entries
Y $80000400 b32 W flags 
Y 0 b32 W reserved
Y 0 b32 W reserved
Y 0 b32 W reserved

W load command #3
Y $19 b32 W LC_SEGMENT_64
M 48 0 0 0 
5f 5f 4c 49 4e 4b 45 44 49 54 00 00 00 00 00 00 W "__LINKEDIT" 
Y $100004000 b64 W vmaddr 
Y $4000 b64 W vmsize 
Y $4000 b64 W fileoffset 
Y $18 b64 W filesize
Y 1 b32 W maxprot 
Y 1 b32 W initprot 
Y 0 b32 W nsects 
Y 0 b32 W flags

W load command #4
Y $80000034 b32 W LC_DYLD_CHAINED_FIXUPS see loader.h
Y $10 b32 W cmdsize
Y $4000 b32 W dataoffset
Y $0 b32 W datasize

W load command #8 
Y $e b32 W LC_LOAD_DYLINKER
Y $20 b32 W cmdsize 
Y $c b32 W strlen 
M 2f 75 73 72 2f 6c 69 62 2f 64 79 6c 64 0 0 0 0 0 0 0  W "/usr/lib/dyld" + pad

W load command #12 
Y $80000028 b32 W LC_MAIN
Y $18 b32 W cmdsize 
Y $3f80 b64 W entryoff 
Y $0 b64 W stack size  

Y $3df0 padding

W _start 100003f88 -> 100000190
Y code write
Y data write


Y 80 padding

W __LINKEDIT (0x4000 offset)
Y $10 padding M 0 0 0 0 1 0 0 0 Y ;