Y 2 sections little endian "out" ext I binary Y 0 I code Y 1 I data Y 2 ;
I ip@ Y code ptr @ I i32 Y code w32 I i8 Y code w8

W Define virtual addresses and alignment for segments. OS sorts return stack
I vma-load Y $10000 I data-start Y $11000 I stack-start Y $12000 I section-align Y $1000

W Misc useful definitions and constants for ELF 64-bit
I b64 Y binary w64 Y ;
I size W (section# -- size) Y dup ptr @ swap base @ -
I elf-head-size Y $40 I phead-size Y $38

W Caluclate offsets for code section
I code-file-offset Y phead-size 2 * elf-head-size + 
I code-load-start Y vma-load code-file-offset + ;

W Padding to align data section in file to map to start of new page
I padding-size Y $1000 $b0 code size + $fff and -
I data-file-offset Y code-file-offset code size + padding-size + ;

W Set the compiler origins for each segment
Y code-load-start code base ! Y code-load-start code ptr !
Y data-start data base ! Y data-start data ptr !

I compile
Y 0 magic!
W ELF headers M
M 7f 45 4c 46 W magic
M 02 01 01 00 W 64-bit, little endian, version, system v
M 00 00 00 00 00 00 00 00 W abi version, padding 
M 02 00 3e 00 W shared object, amd x86-64
M 01 00 00 00 W version 
Y init b64 W entry point
M 40 00 00 00 00 00 00 00 W program header start
M 00 00 00 00 00 00 00 00 W section header start (not included)
M 00 00 00 00 W architecture flags (none?)
M 40 00 W size this header
M 38 00 W size of program header entry
M 02 00 W number of entries in program header table
M 00 00 W size of a section header table entry
M 00 00 W number of section header entries
M 00 00 W index in section header with section names

W Program header -- code
M 01 00 00 00 W loadable segment
M 05 00 00 00 W not writeable (bit0=X, bit1=W, bit2=R)
Y code-file-offset b64 W segment offset in file image
Y vma-load $b0 + b64 W VA of segment in memory
Y vma-load $b0 + b64 W physical address
Y code size b64 W size of segment bytes in file image
Y code size b64 W size of segment bytes in memory
Y section-align b64 W alignment

W Program header -- data
M 01 00 00 00 W loadable segment
M 06 00 00 00 W flags  (bit0=X, bit1=W, bit2=R)
Y data-file-offset b64 W segment offset in file image
Y data-start b64 W VA of segment in memory
Y data-start b64 W physical address
Y data size b64 W size of segment bytes in file image
Y stack-start data-start - b64 W size of segment bytes in memory
Y section-align b64 W alignment

W write-out the segments
Y code write 
Y padding-size padding
Y data write Y ;

I dp@ Y data ptr @ I dp! Y data ptr ! ;
