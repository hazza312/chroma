Y code magic!
I ip@ Y code ptr @ I i32 Y code w32 I i8 Y code w8

I swap W (a b -- b a) Swap the top two elements on the stack.
M 48 8b 1e 48 89 06 48 93 Y ;

I dup W (a -- a a) Duplicate the top element on stack.
M 4c 29 fe 48 89 06 Y ;

I drop W (a --) Remove the top-most item from stack.
M 48 ad Y ; 

I nip W (a b -- b) Remove the second-top item from stack.
M 4c 01 fe Y ;

I lit W R(-- n) C(n --) Emit code to push literal onto runtime stack.
W TODO 64-bit or smaller literals
G dup M b8 Y code w32

I ; W (--) Return from a function call.
M c3 Y ;

I brk W (--) Debug breakpoint.
M cc Y ;

I jmp W C(target --) Emit code to jump to target currently top of compile stack.
W TODO optimise for different branch distances
Y code ptr @ - 5 - M e9 Y i32 ; 

I call W C(target --) Emit code to call target address currently top of compile stack.
Y code ptr @ - 5 - M e8 Y i32 ;

I go W (target --) Indirect jump at to target on top of runtime stack.
M 48 93 48 ad ff d3 Y ;

I + W (n n -- n) Push the sum of the two top numbers on runtime stack.
M 48 93 G drop M 48 01 d8 Y ;

I - W (n n -- n) Subtract tos from sos and push result.
M 48 93 G drop M 48 29 d8 Y ;

I /mod W (a b -- r q) Divide a by b and push remainder and quotient.
M 48 31 d2 48 93 48 ad 48  f7 fb 4c 29 fe 48 89 16 Y ;

I / W (a b -- q) Divide a by b and push quotient. 
Y /mod nip ;

I mod W (a b -- r) Divide a by b and push remainder.
Y /mod G swap drop Y ;

I test W (n --) Helper, test tos and set flags (arch-specific).
TODO simplification?
M 48 85 c0 G drop Y ;

I if W R(n --) C(-- touchup) Execute if tos is non-zero, else branch to 'then'. 
G test M 74 Y ip@ M 00 Y ;

I !if W R(n --) C (-- touchup) Execute if tos is zero, else branch to 'then'.
G test M 75 Y ip@ M 00 Y ;

I -if W R(n --) C (-- touchup) Execute if tos is negative, else branch to 'then'.
G test M 79 Y ip@ M 00 Y ;

I then W R(--) C(touchup --) Fix touchup address of last if with current ip location.
Y dup 1 + ip@  swap - swap i8! Y ;

I 1+ W (n -- n) Increment tos.
M 48 ff c0 Y ;

I 1- W (n -- n) Decrement tos.
M 48 ff c8 Y ;

I for W R(n --) C(-- touchup) Begin fixed iteration loop and push on compile stack touchup address.
M 51 48 91 48 ad Y ip@ ;

I next W R(--) C (touchup --)
Y dup ip@ - 2 - M e2 Y i8 M 59 Y ;

I >r M 50 48 ad Y ;
I r> M 4c 29 fe 48 89 06 58 Y ;
I r@ M 4c 29 fe 48 89 06 48 8b  04 24 Y ;

R rot W (a b c -- b c a) Rotate top three elements on stack.
G >r swap r> swap ;

R -rot W (a b c -- c a b) Rotate top three elements in reverse direction.
G swap >r swap r> ;

R rdrop W drop top item of return stack.
G r> drop ;

R i W (-- n) Push loop counter on stack.
G M 4c 29 fe 48 89 0e Y ;

I ;; W Leave a loop early.
G rdrop ; Y ;

I str Y data ptr @ lit dup len data w8 data cpy
I and M 48 93 G drop M 48 21 D8 Y ;
I shr M 51 48 91 G drop M 48 D3 E8 59 Y ;
I @ M 48 93 48 8b 03 Y ;
I ! M 48 89 c5 48 ad 48 89 45 00 48 ad Y ;
I neg M 48 f7 d8 Y ;

I a! M 49 96 48 ad Y ;
I a M 4c 29 fe 48 89 06 4c 89 f0 Y ;
I !a M 49 89 06 48 ad Y ;
I @a M 4c 29 fe 48 89 06 49 8b 06 Y ;
I +a M 49 ff c6 Y ;
I ++a M 49 83 c6 08 Y ;

